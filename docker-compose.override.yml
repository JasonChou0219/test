version: "3.3"
services:

  proxy:
    ports:
      - "80:80"  # ${BACKEND_GATEWAY_UVICORN_PORT?Variable not set}
      - "8090:8080"
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - traefik.enable=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=${BACKEND_GATEWAY_UVICORN_PORT?Variable not set}

  pgadmin:
    ports:
      - "5050:5050"

  flower:
    ports:
      - "5555:5555"

  db-workflow-designer-node-red:
    ports:
      - "5432:5432"

  db-workflow-scheduler:
    ports:
      - "6432:5432"

  backend-gateway:
    ports:
      - "8887:8887"
    volumes:
      - ./backend-gateway/app:/app
    environment:
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8887
      - SERVER_HOST=http://${DOMAIN?Variable not set}
      - PORT=${BACKEND_GATEWAY_UVICORN_PORT?Variable not set}
    build:
      context: ./backend-gateway
      dockerfile: backend-gateway.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
    # command: bash -c "while true; do sleep 1; done"  # Infinite loop to keep container live doing nothing
    command: /start-reload.sh
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-gateway.rule= Host(`backend-gateway.localhost`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-gateway.rule= Host(`localhost`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-gateway-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      - traefik.http.services.${STACK_NAME?Variable not set}-backend-gateway.loadbalancer.server.port=${BACKEND_GATEWAY_UVICORN_PORT?Variable not set}

  celeryworker-backend-gateway:
    volumes:
      - ./backend-gateway/app:/app
    environment:
      - RUN=celery worker -A app.worker -l info -Q main-queue -c 1
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8887
      - SERVER_HOST=http://${DOMAIN?Variable not set}
    build:
      context: ./backend-gateway
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}

  service-manager:
    ports:
      - "8889:8889"
      # - "${SERVICE_MANAGER_UVICORN_PORT?Variable not set}:${SERVICE_MANAGER_UVICORN_PORT?Variable not set}"
    volumes:
      - ./service-manager/app:/app
    environment:
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8889
      - SERVER_HOST=http://${DOMAIN?Variable not set}
      - PORT=${SERVICE_MANAGER_UVICORN_PORT?Variable not set}
      - BIND=${DOMAIN?Variable not set}:${SERVICE_MANAGER_UVICORN_PORT?Variable not set}
    build:
      context: ./service-manager
      dockerfile: service-manager.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
    #command: bash -c "while true; do sleep 1; done"  # Infinite loop to keep container live doing nothing
    command: /start-reload.sh
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      #- traefik.http.routers.${STACK_NAME?Variable not set}-service-manager.rule= Host(`service-manager.localhost`)
      #- traefik.http.routers.${STACK_NAME?Variable not set}-service-manager-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      - traefik.http.services.${STACK_NAME?Variable not set}-service-manager.loadbalancer.server.port=${SERVICE_MANAGER_UVICORN_PORT?Variable not set}

  celeryworker-service-manager:
    volumes:
      - ./service-manager/app:/app
    environment:
      - RUN=celery worker -A app.worker -l info -Q main-queue -c 1
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8889
      - SERVER_HOST=http://${DOMAIN?Variable not set}
    build:
      context: ./service-manager
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}

  frontend:
    build:
      context: ./frontend
      args:
        FRONTEND_ENV: dev
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80

  workflow-scheduler:
    # ports:
    #  - "${WORKFLOW_SCHEDULER_UVICORN_PORT?Variable not set}:${WORKFLOW_SCHEDULER_UVICORN_PORT?Variable not set}"
    volumes:
      - ./workflow-scheduler/app:/app
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:9999
      - SERVER_HOST=http://${DOMAIN?Variable not set}
      - PORT=${WORKFLOW_SCHEDULER_UVICORN_PORT?Variable not set}
      - BIND=${DOMAIN?Variable not set}:${WORKFLOW_SCHEDULER_UVICORN_PORT?Variable not set}
    build:
      context: ./workflow-scheduler
      dockerfile: workflow-scheduler.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
    # command: bash -c "while true; do sleep 1; done"  # Infinite loop to keep container live doing nothing
    command: /start-reload.sh
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      #- traefik.http.routers.${STACK_NAME?Variable not set}-workflow-scheduler.rule= Host(`workflow-scheduler.localhost`)
      #- traefik.http.routers.${STACK_NAME?Variable not set}-workflow-scheduler-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      - traefik.http.services.${STACK_NAME?Variable not set}-workflow-scheduler.loadbalancer.server.port=${WORKFLOW_SCHEDULER_UVICORN_PORT?Variable not set}

  workflow-designer-python:
    ports:
      - "8890:8890"
    #  - "${WORKFLOW_DESIGNER_PYTHON_UVICORN_PORT?Variable not set}:${WORKFLOW_DESIGNER_PYTHON_UVICORN_PORT?Variable not set}"
    volumes:
      - ./workflow-designer-python/app:/app
    environment:
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8890
      - SERVER_HOST=http://${DOMAIN?Variable not set}
      - PORT=${WORKFLOW_DESIGNER_PYTHON_UVICORN_PORT?Variable not set}
    build:
      context: ./workflow-designer-python
      dockerfile: workflow-designer-python.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
    #command: bash -c "while true; do sleep 1; done"  # Infinite loop to keep container live doing nothing
    command: /start-reload.sh
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      #- traefik.http.routers.${STACK_NAME?Variable not set}-workflow-designer-python.rule= Host(`workflow-designer-python.localhost`)
      #- traefik.http.routers.${STACK_NAME?Variable not set}-workflow-designer-python-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      - traefik.http.services.${STACK_NAME?Variable not set}-workflow-designer-python.loadbalancer.server.port=${WORKFLOW_DESIGNER_PYTHON_UVICORN_PORT?Variable not set}

  data-acquisition:
    ports:
      - "8891:8891"
    volumes:
      - ./data-acquisition/app:/app
    environment:
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8891
      - SERVER_HOST=http://${DOMAIN?Variable not set}
      - PORT=${DATA_ACQUISITION_UVICORN_PORT?Variable not set}
    build:
      context: ./data-acquisition
      dockerfile: data-acquisition.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
    # command: bash -c "while true; do sleep 1; done"  # Infinite loop to keep container live doing nothing
    command: /start-reload.sh
    labels:
      - traefik.enable=true
      # - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      # - traefik.http.routers.${STACK_NAME?Variable not set}-data-acquisition-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      - traefik.http.services.${STACK_NAME?Variable not set}-data-acquisition.loadbalancer.server.port=${DATA_ACQUISITION_UVICORN_PORT?Variable not set}

  celeryworker-data-acquisition:
    volumes:
      - ./data-acquisition/app:/app
    environment:
      - RUN=celery worker -A app.worker -l info -Q main-queue -c 1
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
      - SERVER_HOST=http://${DOMAIN?Variable not set}
    build:
      context: ./data-acquisition
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false
